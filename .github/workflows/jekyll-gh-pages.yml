# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Flutter Latest
  # You may pin to the exact commit or the version.
  # uses: geowatson/flutter-latest@f71e57a721f066cc8d8d197f77991d5ecbaaec9c
        uses: geowatson/flutter-latest@1.0.1

      - name: dart-package
        uses: nikosportolos/dart_package@v0.2.2
        with:
          # Specify the working directory.
          working_directory: lib
          # Specify which SDK to use (dart, flutter).
          sdk: dart
          # Specify the Dart SDK version.
          dart_sdk: 3.5.3
          # Specify the Flutter SDK version.
          flutter_sdk: 3.22.3
          # Specify the directories to run dart analyze.
          analyze_directories: main.dart
          # The line length to use with dart format.
          line_length: 120
          # Controls the number of test suites that runs concurrently, meaning that multiple tests in independent suites or platforms can run at the same time.
          concurrency: 4
          # Flag that defines whether to skip tests.
          skip_tests: false
          # Flag that defines whether to run tests with coverage.
          coverage: false
          # Flag that defines whether to upload coverage reports to Codecov. Requires the codecov_token.
          codecov: false
          # The token that will be used to upload coverage reports to Codecov. Requires the codecov flag to be set to true.
          codecov_token: 
          # Flag that defines whether to publish the package on pub.dev.
          publish: false
          # The token that will be used to publish the package to pub.dev.
          pubdev_token: 
          # The exit code will indicate if (max - granted points) <= threshold.
          pana_threshold: 19


        
